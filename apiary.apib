FORMAT: 1A

# OpenProject API v3
TODO: Description

# Group Hypermedia
TODO: Description & Resources

# Group Formats
TODO: Description and why only JSON

# Group HAL+JSON
HAL is a simple format that gives a consistent and easy way to hyperlink between resources in your API.
Read more: http://stateless.co/hal_specification.html

**OpenProject API implementation of HAL+JSON format** enriches JSON and introduces few meta attributes:

    - `_type` - specifies the type of the resource (E.g.: WorkPackage, Project)
    - `_links` - contains all links available for the resource
    - `_embedded` - contains all embedded objects
    - `_collection` - contains the collection of objects
    - `_count` - number of records fetched in the response
    - `_total` - number of available records

# Group API response structure
Depending on performed request, the OpenProject API will return a response in one of the following possible structures:

- As a **simple HAL+JSON object** (E.g.: GET /projects/:id)
- As a **collection of HAL+JSON objects** (E.g.: GET /projects)
- As a **collection of HTTP statuses and HAL+JSON objects** (E.g.: PATCH /projects?id[]=1&id[]=2)
- As an **OpenProject API error object**

### Simple HAL+JSON object
Contains it's own data attributes and some meta attributes:

        {
            "id": 1,
            "name": "My awesome project",
            ...

            "_type": "Project",
            "_links": {
                "self": { "href": "/projects/1", "title": "My awesome project" },
                "update": { "href": "/projects/1", "method": "patch", "title": "Update My awesome project" },
                "delete": { "href": "/projects/1", "method": "delete", "title": "Delete My awesome project" }
            },
            "_embedded": {
                ...
            }
        }

### Collection of HAL+JSON objects
Contains collection of simple HAL+JSON objects in it's `_collection` attribute. Also contains some collection
specific meta data:

    {
        "_collection": [{
            "id": 1,
            ...

            "_type": "Project"
            "_links": {
                "self": { "href": "/projects/1", "title": "My awesome project" },
                "update": { "href": "/projects/1", "method": "patch", "title": "Update My awesome project" },
                "delete": { "href": "/projects/1", "method": "delete", "title": "Delete My awesome project" }
            },
            "_embedded": {
                ...
            }
        }, {
            "id": 2,
            ...

            "_type": "Project"
            "_links": {
                "self": { "href": "/projects/2", "title": "My awesome project" },
                "update": { "href": "/projects/2", "method": "patch", "title": "Update My awesome project" },
                "delete": { "href": "/projects/2", "method": "delete", "title": "Delete My awesome project" }
            },
            "_embedded": {
                ...
            }
        }],
        "_type": "Project",
        "_links": {
            ...
        },
        "_count": 2,
        "_total": 476
    }

### Collection of HTTP statuses and HAL+JSON objects
Response with this structure will be returned by endpoints performing **batch operations** (e.g.: update multiple projects).
The main HTTP status code of the response will be `207 Multi-Status` and the response body will contain different response
codes based on the results of each individual operation.

For example if you perform a batch update request on multiple projects (`PATCH /projects`) it is possible that one project will
be updated successfully while the update of other one will fail:

    {
        "_collection": [{
            "status": { "code": 200, "text": "Ok" },
            "object": {
                "id": 1,
                "name": "My awesome project",
                ...

                "_type": "Project",
                "_links": {
                    ...
                },
                "_embedded": {
                    ...
                }
            }
        }, {
            "status": { "code": 500, "text": "Internal Server Error" },
            "error": { "opCode": 51, "messages": [{ "key": "serverError", "text": "Something went wrong. Please try again latter." }]},
            "request": { requestParams }
        }],
        "_type": "Project",
        "_links": {
            ...
        }
    }

This allows you to see exactly what went wrong and inform user.

### Error object
In case your request contains some errors or something went wrong on the server you'll get back an error object:

    { "error": { "opCode": 51, "message": "Something went wrong. Please try again latter." }}


# Group Allowed HTTP methods

- `GET` - Get a single resource or collection of resources
- `POST` - Create a new resource or perform
- `PATCH` - Update a resource
- `DELETE` - Delete a resource

# Group Response codes

- `200 OK` - Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource.
- `201 Created` - The request has been fulfilled and resulted in a new resource being created
- `202 Accepted` - The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.
- `204 No content` - The server successfully processed the request, but is not returning any content. Usually used as a response to a successful delete request. Also returned for requests containing the If-Modified-Since header if the document is up-to-date.
- `207 Multi-Status` - The message body that follows can contain a number of separate response codes, depending on how many sub-requests were made.

- `301 Moved Permanently` - This and all future requests should be directed to the given
- `303 See Other` - The response to the request can be found under another URI using a GET method. When received in response to a POST (or PUT/DELETE), it should be assumed that the server has received the data and the redirect should be issued with a separate GET message.

- `400 Bad Request` - The request cannot be fulfilled due to bad syntax.
- `401 Unauthorized` - Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided.
- `403 Forbidden` - The request was a valid request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference.
- `404 Not Found` - The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible.
- `405 Method Not Allowed` - A request was made of a resource using a request method not supported by that resource
- `406 Not Acceptable` - The requested resource is only capable of generating content not acceptable according to the Accept headers sent in the request.
- `422 Unprocessable Entity` - The request was well-formed but was unable to be followed due to semantic errors.

- `500 Internal Server Error` - A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.
- `501 Not Implemented` - The server either does not recognize the request method, or it lacks the ability to fulfill the request. Usually this implies future availability.
- `503 Service Unavailable` - The server is currently unavailable (because it is overloaded or down for maintenance).

# OpenProject API error objects
**TODO**
In case something went wrong, you will get back an OpenProject API error object in the following form:

    { "error": { "opCode": 41, "messages": [{ "key": "unauthenticated", "text": "You need to be login to access this resource" }]}}

Attribute `opCode` is internal OpenProject API error code:

**Client errors**

- 41 -
- 42 -

**Server errors**

- 51 -
- 52 -

# Group Work packages

## Work package's embedded resources

- `project` - Project
- `author`  - User
- `assignee` - User
- `responsible` - User
- `fixedVersion` - Version
- `descendands` - WorkPackage [ ]
- `children` - WorkPackage [ ]
- `parent` - WorkPackage
- `ancestors` - WorkPackage [ ]
- `relations`  - Relation [ ]

## Attributes:
| Attribute | Description | Type | Constraints | Example | Supported operations |
|:---------:|-------------| ---- | ----------- | ------- | -------------------- |
| id | Work package id | Integer | Must be a positive integer | 12 | READ |
| subject | Work package subject | String | | Refactor projecs module | READ / WRITE |
| type | | String | Must be one of the types that exist in the system | Feature | READ / WRITE |
| description | Work package description | Text | | Projects module should be refactored ... | READ / WRITE |
| status | | String | Must be one of the statuses allowed for the current work package type | New | READ / WRITE |
| priority | | String | Must be one of the priorities that exist in the system | High | READ / WRITE |
| startDate | | Timestamp | Must be in ISO 8601 format - YYYY-MM-DDTHH:MM:SSZ | 2014-05-21T08:51:20Z | READ / WRITE |
| dueDate | | Timestamp | Must be in ISO 8601 format - YYYY-MM-DDTHH:MM:SSZ | READ / WRITE |
| estimatedTime | | Object | Must be in form of a json object with "units" and "value" as keys | { "units": "hours", "value": 12 } | READ / WRITE |
| percentageDone | | Integer | Must be an integer between 0 and 100 | 50 | READ / WRITE |
| projectId | | Integer | Must be an id of one of the existing projects | 1 | READ / WRITE |
| projectName | | String | | My open project | READ |
| responsibleId | | Integer | Must be an id of one of the allowed responsible users for the work package | 12 | READ / WRITE |
| responsibleName | | String | | John Sheppard | READ |
| responsibleLogin | | String | | j.sheppard | READ |
| responsibleMail | | String | | j.sheppard@finn.de| READ |
| assigneeId | | Integer | Must be an id of one of the allowed assignees for the work package | 12 | READ / WRITE |
| assigneeName | | String | | John Sheppard | READ |
| assigneeLogin | | String | | j.sheppard | READ |
| assigneeMail | | String | | j.sheppard@finn.de| READ |
| authorName | | String | | John Sheppard | READ |
| authorLogin | | String | | j.sheppard | READ |
| authorMail | | String | | j.sheppard@finn.de| READ |
| createdAt | | Timestamp | Returned in ISO 8601 format - YYYY-MM-DDTHH:MM:SSZ | | READ |
| updatedAt | | Timestamp | Returned in ISO 8601 format - YYYY-MM-DDTHH:MM:SSZ | | READ |

## WorkPackage [/work_packages/{id}{?extend}]

+ Model
    + Body

            {
                "_type": "WorkPackage",
                "_links": {
                    "self": {
                        "href": "https://openproject.org/api/v3/work_packages/1",
                        "title": "Work package"
                    }
                },
                "id": 1
                "subject": "Quis numquam qui voluptatum quia praesentium blanditiis nisi",
                "type": "Support",
                "description": "Crux vel eos dolores admoveo summa veritatis acerbitas. Deleo venustas cubo curtus balbus sumo ambitus valens. Tener cotidie angelus illo. Cito verto comburo. Tergeo vinculum succedo ullus suppono.",
                "status": "New",
                "priority": "Normal",
                "startDate": "2014-05-21T08:51:20Z",
                "dueDate": "2014-07-21T11:56:39Z",
                "estimatedTime": {
                    "units": "hours",
                    "value": 10
                },
                "percentageDone": 0,
                "targetVersionId": 1,
                "targetVersionName": "Sprint-01",
                "projectId": 1,
                "projectName": "My open project",
                "responsibleId": 12,
                "responsibleName": "John Sheppard",
                "responsibleLogin": "j.sheppard",
                "responsibleMail": "j.sheppard@finn.de",
                "assigneeId": 12,
                "assigneeName": "John Sheppard",
                "assigneeLogin": "j.sheppard",
                "assigneeMail": "j.sheppard@finn.de",
                "authorName": "John Sheppard",
                "authorLogin": "j.sheppard",
                "authorMail": "j.sheppard@finn.de",
                "createdAt": "2014-05-21T08:51:20Z",
                "updatedAt": "2014-05-21T11:56:39Z"
            }
                
## View work package [GET]

+ Parameters
    + id (required, integer, `1`) ... Work package id
    + extend (optional, string, `responsible,author`) ... Extend child resources
    
+ Response 200 (application/hal+json)

    [WorkPackage][]

## Update work package [PATCH]
Send only the data you want to update

+ Parameters
    + id (required, integer, `1`) ... Work package id.
    
+ Response 200 (application/hal+json)

    [WorkPackage][]

## Delete work package [DELETE]

+ Parameters
    + id (required, integer, `1`) ... Work package id.
    
+ Response 204

## Get header [HEAD]


+ Parameters
    + id (required, integer, `1`) ... Work package id.
    
+ Response 204
    + Headers
    
            Link: </>

## Get allowed HTTP methods [OPTIONS]

+ Parameters
    + id (required, integer, `1`) ... Work package id.
    
+ Response 200 (application/hal+json)
    + Headers
    
            Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS

    + Body
    
            {
                "message": "Lorem ipsum"
            }
